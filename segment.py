#!/usr/bin/env python

# DP A B C D E F G
digit_register = {
    0: '01111110',
    1: '00110000',
    2: '01101101',
    3: '01111001',
    4: '00110011',
    5: '01011011',
    6: '01011111',
    7: '01110000',
    8: '01111111',
    9: '01111011',

    ' ': '00000000',
    '!': '10110000',
    '"': '00100010',
    '#': '00111111',
    '$': '01011011',
    '%': '10100101',
    '&': '00110001',
    "'": '00000010',
    '(': '01001010',
    ')': '01101000',
    '*': '01000010',
    '+': '00000111',
    ',': '00000100',
    '-': '00000001',
    '.': '10000000',
    '/': '00100101',
    '0': '01111110',
    '1': '00110000',
    '2': '01101101',
    '3': '01111001',
    '4': '00110011',
    '5': '01011011',
    '6': '01011111',
    '7': '01110000',
    '8': '01111111',
    '9': '01111011',
    ':': '01001000',
    ';': '01011000',
    '<': '01000011',
    '=': '00001001',
    '>': '01100001',
    '?': '11100101',
    '@': '01111101',
    'A': '01110111',
    'B': '00011111',
    'C': '01001110',
    'D': '00111101',
    'E': '01001111',
    'F': '01000111',
    'G': '01011110',
    'H': '00110111',
    'I': '00000110',
    'J': '00111100',
    'K': '01010111',
    'L': '00001110',
    'M': '01010100',
    'N': '01110110',
    'O': '01111110',
    'P': '01100111',
    'Q': '01101011',
    'R': '01100110',
    'S': '01011011',
    'T': '00001111',
    'U': '00111110',
    'V': '00111110',
    'W': '00101010',
    'X': '00110111',
    'Y': '00111011',
    'Z': '01101101',
    '[': '01001110',
    '\\': '00010011',
    ']': '01111000',
    '^': '01100010',
    '_': '00001000',
    '`': '00100000',
    'a': '01111101',
    'b': '00011111',
    'c': '00001101',
    'd': '00111101',
    'e': '01101111',
    'f': '01000111',
    'g': '01111011',
    'h': '00010111',
    'i': '00000100',
    'j': '00011000',
    'k': '01010111',
    'l': '00000110',
    'm': '00010100',
    'n': '00010101',
    'o': '00011101',
    'p': '01100111',
    'q': '01110011',
    'r': '00000101',
    's': '01011011',
    't': '00001111',
    'u': '00011100',
    'v': '00011100',
    'w': '00010100',
    'x': '00110111',
    'y': '00111011',
    'z': '01101101',
    '{': '00110001',
    '|': '00000110',
    '}': '00000111',
    '~': '01000000'
}

def to_segment(n, length=4):
    if type(n) is int:
        return int_to_segment(n, length)
    if type(n) is str:
        return str_to_segment(n, length)
    if type(n) is float:
        return float_to_segment(n, length)

def int_to_segment(n, length=4):
    res = []
    for i in str(n).rjust(length, ' ')[:length]:
        res.append(digit_register[i])
    return res

def str_to_segment(n, length=4):
    res = []
    for i in n.rjust(length, ' ')[:length]:
        res.append(digit_register[i])
    return res

def float_to_segment(n, length=4):
    res = []

    if n < 10 ** (length-1):  # this means the comma needs to be accounted for
        for i in str(n).rjust(length+1, ' ')[:length+1]:
            if digit_register[i] == 0x80:  # add comma to previous digit
                res[-1] |= digit_register[i]
            else:
                res.append(digit_register[i])
    else:
        res = int_to_segment(int(n), length)
    return res
